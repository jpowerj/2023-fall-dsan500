---
title: "Week 13: Association Rule Mining (ARM)"
subtitle: "*Combined meeting: Sections 02, 03, and 04*"
date: "Tuesday, November 21, 2023"
date-format: full
lecnum: 13
categories:
  - "Class Sessions"
bibliography: "../_DSAN5000.bib"
format:
  revealjs:
    output-file: slides.html
    cache: false
    footer: "DSAN 5000 Week 13: Association Rule Mining (ARM)"
    df-print: kable
  html:
    output-file: index.html
    html-math-method: mathjax
    cache: false
    code-fold: true
    warning: false
metadata-files: 
  - "../_slide-meta.yml"
---


::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::

# Schedule {.smaller .small-title .crunch-title .crunch-callout data-name="Schedule"}

{{< include ../_r-globals.qmd >}}

{{< include ../_py-globals.qmd >}}

{{< include ../_tex-globals.qmd >}}

Today's Planned Schedule:

| | Start | End | Topic | Recording |
|:- |:- |:- |:- |:-:|
| **Lecture** | 12:30pm | 2:00pm | <a href="#association-rule-mining">Association Rule Mining &rarr;</a> | <a id="rec-link-w13-1" href="../recordings/recording-w12s02-1.html" target="_blank"><i class="bi bi-film"></i></a> |
| **Break!** | <span class='sec-p90'>2:00pm</span> | <span class='sec-p100'>2:10pm</span> | | |
| | <span class='sec-p100'>2:10pm</span> | <span class='sec-p130'>3:00pm</span> | <a href='#clustering-and-dimensionality-reduction-for-text-data'>ARM Lab &rarr;</a> | <a href='../recordings/recording-w13s02-1.html' target='_blank'><i class='bi bi-film'></i></a> |

: {tbl-colwidths="[14,12,12,50,12]"}

# Network Analysis {data-stack-name="Networks"}

## Review (W05): Network Representations {.smaller .title-12 .crunch-title .crunch-ul .small-table-text .small-captions}

* Network data form **two** tabular datasets: one for **nodes** and one for **edges**
* Ex: Network on left could be represented via pair of tabular datasets on right

::: {layout-ncol=3}

![Network of some sort of ancient kinship structure](images/pokemon_graph_subsets.png){#fig-pokemon width="500"}

::: {#fig-nodes}

| node_id | label |
| - | - |
| 1 | Bulbasaur |
| 2 | Ivysaur |
| $\vdots$ | $\vdots$ |
| 9 | Blastoise |
| 83 | Farfetch'd |

A tabular dataset representing the **nodes** in the network above
:::

::: {#fig-edges}

| edge_id | source | target | weight |
| - | - | - | - |
| 0 | 1 | 2 | 16 |
| 1 | 2 | 3 | 32 |
| 2 | 4 | 5 | 16 |
| 3 | 5 | 6 | 36 |
| 4 | 7 | 8 | 16 |
| 5 | 8 | 9 | 36 |

A tabular dataset representing the **edges** in the network above
:::

:::

## New Toy Over Break: NetworkX! {.crunch-title .crunch-code}

```{python}
#| label: networkx-intro
#| output-location: column
#| code-fold: show
import networkx as nx
import matplotlib.pyplot as plt
G = nx.DiGraph()
G.add_nodes_from(
    [("Bulbasaur", dict(subset=1)), ("Ivysaur", dict(subset=1)), ("Venusaur", dict(subset=1)),
     ("Charmander", dict(subset=2)), ("Charmeleon", dict(subset=2)), ("Charizard", dict(subset=2)),
     ("Squirtle", dict(subset=3)), ("Wartortle", dict(subset=3)), ("Blastoise", dict(subset=3)),
     ("Farfetch'd", dict(subset=4))]
)
G.add_edge("Bulbasaur", "Ivysaur", weight=16)
G.add_edge("Ivysaur", "Venusaur", weight=32)
G.add_edge("Charmander", "Charmeleon", weight=16)
G.add_edge("Charmeleon", "Charizard", weight=36)
G.add_edge("Squirtle", "Wartortle", weight=16)
G.add_edge("Wartortle", "Blastoise", weight=36)
plt.figure(figsize=(6,7))
#layout = nx.circular_layout(G)
#layout = nx.spiral_layout(G)
#layout = nx.kamada_kawai_layout(G)
#layout = nx.random_layout(G)
#layout = nx.shell_layout(G)
layout = nx.multipartite_layout(G)
nx.draw_networkx_nodes(G, layout, node_size=4000, node_color='white', edgecolors='black')
nx.draw_networkx_labels(G, layout, font_size=10);
nx.draw_networkx_edges(G, layout, node_size=4000, arrows=True, arrowsize=30)
#layout = nx.draw_circular(G, with_labels=True, node_size=2500, arrowsize=25)
edge_labels = nx.get_edge_attributes(G, "weight")
nx.draw_networkx_edge_labels(G, layout, edge_labels);
plt.margins(x=0.2, y=0.1)
plt.show()
```

## Common Network Topologies {.crunch-code .crunch-quarto-layout-panel}

::: {layout="[1,1]"}

::: {#fully-connected}

<center>
**Fully-Connected: $N = 5$**
</center>

```{python}
#| label: fully-connected-graph
import networkx as nx
import matplotlib.pyplot as plt
complete = nx.complete_graph(5)
nx.draw_circular(
  complete, with_labels = True,
  node_color = 'lightblue',
  node_size = 3000,
  font_size = 32
)
plt.tight_layout()
plt.show()
```

:::

::: {#bipartite}

<center>
**Bipartite: $M = 4, N = 5$**
</center>

```{python}
import networkx as nx
import matplotlib.pyplot as plt
B = nx.complete_bipartite_graph(4, 5)
top = nx.bipartite.sets(B)[0]
pos = nx.bipartite_layout(B, top)
nx.draw(
  B, pos=pos, with_labels=True,
  node_color = 'lightblue',
  node_size = 4000,
  font_size = 32
)
plt.margins(y=0.1)
plt.show()
```

:::
:::

## Common Network Topologies II

::: {layout="[1,1]"}

::: {#path-col}

<center>
**Path**
</center>

```{python}
#| label: path-graph
import networkx as nx
import matplotlib.pyplot as plt
path_graph = nx.path_graph(5)
nx.draw(
  path_graph, with_labels = True,
  node_color = 'lightblue',
  node_size = 4500,
  font_size = 32
)
plt.margins(y=0.1)
plt.show()
```

:::
::: {#cycle-col}

<center>
**Cycle**
</center>

```{python}
#| label: cycle-graph
import networkx as nx
import matplotlib.pyplot as plt
path_graph = nx.cycle_graph(5)
nx.draw(
  path_graph, with_labels = True,
  node_color = 'lightblue',
  node_size = 4500,
  font_size = 32
)
plt.margins(y=0.1)
plt.show()
```

:::
:::

# Association Rule Mining (ARM) {data-stack-name="ARM"}

## Motivating Application: Market Basket Analysis {.title-11 .smaller .crunch-quarto-layout-cell}

::: {layout="[[1,1],[1]]"}

::: {#transaction-cart}

<center>
**Transactions (Cart):**
</center>

| id | items |
| - | - |
| 1 | Milk, Bread, Fruit |
| 2 | Butter, Eggs, Fruit |
| 3 | Beer, Diapers |
| 4 | Milk, Bread, Butter, Eggs, Fruit |
| 5 | Bread |

:::
::: {#transactions-matrix}

<center>
**Transactions (Matrix Format):**
</center>

```{=html}
<table class='ctable'>
<thead>
<tr>
  <th>id</td>
  <th>Milk</th>
  <th>Bread</th>
  <th>Butter</th>
  <th>Beer</th>
  <th>Diapers</th>
  <th>Eggs</th>
  <th>Fruit</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>1</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
</tr>
<tr>
  <td>2</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
</tr>
<tr>
  <td>3</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
</tr>
<tr>
  <td>4</td>
  <td>1</td>
  <td>1</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
</tr>
<tr>
  <td>5</td>
  <td>0</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
</tr>
</tbody>
</table>
```

:::
::: {#arm-rules}

<center>
**What rules can we infer? How can we evaluate these?**
</center>

::: {layout="[1,1]"}
::: {#rules-left}

* $R_1 = \{\text{Butter}\} \overset{?}{\Rightarrow} \{\text{Eggs}\}$
* $R_2 = \{\text{Milk}, \text{Bread}\} \overset{?}{\Rightarrow} \{\text{Butter}\}$

:::
::: {#rules-right}

* $R_3 = \{\text{Milk}, \text{Bread}\} \overset{?}{\Rightarrow} \{\text{Coke}, \text{Fruit}\}$
* $R_4 = \{\text{Beer}\} \overset{?}{\Rightarrow} \{\text{Butter}\}$

:::
:::

:::
:::

## Market Basket Network

```{python}
#| label: market-basket-network-plot
#| fig-width: 6
import numpy as np
np.random.seed(5000)
basket_graph = nx.Graph()
nodes = ['Milk','Bread','Butter','Beer','Diapers','Eggs','Fruit']
basket_graph.add_edge('Milk','Bread',weight=2)
basket_graph.add_edge('Milk','Fruit',weight=2)
basket_graph.add_edge('Bread','Fruit',weight=2)
basket_graph.add_edge('Butter','Eggs',weight=2)
basket_graph.add_edge('Butter','Fruit',weight=2)
basket_graph.add_edge('Eggs','Fruit',weight=2)
basket_graph.add_edge('Beer','Diapers',weight=1)
basket_graph.add_edge('Milk','Butter',weight=1)
basket_graph.add_edge('Milk','Eggs',weight=1)
basket_graph.add_edge('Bread','Butter',weight=1)
basket_graph.add_edge('Bread','Eggs',weight=1)
spring_pos = nx.spring_layout(
  basket_graph,
  #pos = {'Fruit': (0.5,0.3), 'Beer': (0.5,0.8)},
  #fixed = ['Fruit','Beer'],
  seed = 5000,
  k = 2
)
nx.draw(
  basket_graph, spring_pos, with_labels=True,
  #node_color = 'lightblue',
  node_size = 1200,
  font_size = 16,
  node_shape="s",  node_color="none",
  bbox=dict(facecolor="lightblue", edgecolor='black', boxstyle='round,pad=0.2')
)
edge_labels_dict=dict([((u,v,),d['weight']) for u,v,d in basket_graph.edges(data=True)])
edge_labels = nx.draw_networkx_edge_labels(basket_graph, pos=spring_pos, edge_labels=edge_labels_dict, font_size=14, bbox=dict(facecolor="white", edgecolor='none', boxstyle='round,pad=0.2'))
plt.gca().set_aspect('equal')
plt.margins(x = 0.4)
plt.show()
```

## Key Metrics: Support {.crunch-title .small-math .small-inline .crunch-ul}

* $\text{Supp}(X)$: Measures How often items in $X$ occur together relative to all other transactions
* $\text{Supp}({\color{green}\{\text{Milk}, \text{Bread}\}}) = \frac{2}{5}, \text{Supp}({\color{orange}\{\text{Butter}\}}) = \frac{2}{5}$

```{=html}
<style>
.gc {
  border: 4px solid green;
  padding-left: 10px !important;
  padding-right: 10px !important;
}
.oc {
  border: 4px solid orange;
  padding-left: 10px !important;
  padding-right: 10px !important;
}
</style>
<table class='ctable'>
<thead>
<tr>
  <th>ID</td>
  <th>Milk</th>
  <th>Bread</th>
  <th>Butter</th>
  <th>Beer</th>
  <th>Diapers</th>
  <th>Eggs</th>
  <th>Fruit</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td><span class='gc'>1</span></td>
  <td><span class='gc'>1</span></td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
</tr>
<tr>
  <td>2</td>
  <td>0</td>
  <td>0</td>
  <td><span class='oc'>1</span></td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
</tr>
<tr>
  <td>3</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
</tr>
<tr>
  <td>4</td>
  <td><span class="gc">1</span></td>
  <td><span class='gc'>1</span></td>
  <td><span class='oc'>1</span></td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
</tr>
<tr>
  <td>5</td>
  <td>0</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
</tr>
</tbody>
</table>
```

## Key Metrics: Confidence {.smaller}

* $\text{Conf}(X \Rightarrow Y) = \Pr(Y \mid X) = \frac{\Pr(X, Y)}{\Pr(X)}$

$$
\begin{align*}
&\text{Conf}(\{\text{Milk}, \text{Bread}\} \Rightarrow \{\text{Butter}\}) \\
= &\frac{
  \Pr({\color{purple}\{\text{Milk}, \text{Bread}, \text{Butter}\}})
}{
  \Pr({\color{green}\{\text{Milk}, \text{Bread}\}})
} = \frac{{\color{purple}\boxed{1/5}}}{{\color{green}\boxed{2/5}}} = \frac{1}{2}
\end{align*}
$$

```{=html}
<style>
.gc {
  border: 4px solid green;
  padding-left: 10px !important;
  padding-right: 10px !important;
}
.pc-l {
  border-left: 4px solid purple;
  border-top: 4px solid purple;
  border-bottom: 4px solid purple !important;
}
.pc-m {
  border-top: 4px solid purple;
  border-bottom: 4px solid purple !important;
}
.pc-r {
  border-top: 4px solid purple;
  border-right: 4px solid purple;
  border-bottom: 4px solid purple !important;
}
</style>
<table class='ctable'>
<thead>
<tr>
  <th>ID</td>
  <th>Milk</th>
  <th>Bread</th>
  <th>Butter</th>
  <th>Beer</th>
  <th>Diapers</th>
  <th>Eggs</th>
  <th>Fruit</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td><span class='gc'>1</span></td>
  <td><span class='gc'>1</span></td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
</tr>
<tr>
  <td>2</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
</tr>
<tr>
  <td>3</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
</tr>
<tr>
  <td>4</td>
  <td class="pc-l"><span class="gc">1</span></td>
  <td class='pc-m'><span class='gc'>1</span></td>
  <td class='pc-r'>1</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
</tr>
<tr>
  <td>5</td>
  <td>0</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
</tr>
</tbody>
</table>
```

## Key Metrics: Lift {.smaller .crunch-title .crunch-math}

$$
\text{Lift}(X \Rightarrow Y) = \frac{\text{Supp}(X \cap Y)}{\text{Supp}(X) \cdot \text{Supp}(Y)}
$$
* $\underbrace{\{\text{Milk}, \text{Bread}\}}_{X} \Rightarrow \underbrace{\{\text{Butter}\}}_{Y}$ has a lift of

$$
\frac{\text{Supp}(X \cap Y)}{\text{Supp}(X) \cdot \text{Supp}(Y)} = \frac{{\color{purple}\boxed{1/5}}}{{\color{green}\boxed{2/5}} \cdot {\color{orange}\boxed{2/5}}} = \frac{5}{4}
$$

```{=html}
<style>
.gc {
  border: 4px solid green;
  padding-left: 10px !important;
  padding-right: 10px !important;
}
.oc {
  border: 4px solid orange;
  padding-left: 10px !important;
  padding-right: 10px !important;
}
.pc-l {
  border-left: 4px solid purple;
  border-top: 4px solid purple;
  border-bottom: 4px solid purple !important;
}
.pc-m {
  border-top: 4px solid purple;
  border-bottom: 4px solid purple !important;
}
.pc-r {
  border-top: 4px solid purple;
  border-right: 4px solid purple;
  border-bottom: 4px solid purple !important;
}
</style>
<table class='ctable'>
<thead>
<tr>
  <th>ID</td>
  <th>Milk</th>
  <th>Bread</th>
  <th>Butter</th>
  <th>Beer</th>
  <th>Diapers</th>
  <th>Eggs</th>
  <th>Fruit</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td><span class='gc'>1</span></td>
  <td><span class='gc'>1</span></td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
</tr>
<tr>
  <td>2</td>
  <td>0</td>
  <td>0</td>
  <td><span class='oc'>1</span></td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
</tr>
<tr>
  <td>3</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
</tr>
<tr>
  <td>4</td>
  <td class="pc-l"><span class="gc">1</span></td>
  <td class='pc-m'><span class='gc'>1</span></td>
  <td class='pc-r'><span class='oc'>1</span></td>
  <td>0</td>
  <td>0</td>
  <td>1</td>
  <td>1</td>
</tr>
<tr>
  <td>5</td>
  <td>0</td>
  <td>1</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
  <td>0</td>
</tr>
</tbody>
</table>
```

## Lift as Pointwise Mutual Information (PMI) {.smaller .title-12}

* Key problem in NLP: identification of **lexemes**
* What is the relationship between **meaning** and **words**?
* Think of: **[Chile]**, **[Equatorial] [Guinea]**, **[Nether][lands]**^[This last one never occurred to me until I learned French, where it's called *Les Pays-Bas* 🤯]
* Or: **[Wel][come!]**, **[Will][kommen!]**, **[Bien][venidos!]**
* Sometimes a word provides **one "unit"** of semantic meaning (one **lexeme**), sometimes more than one, and sometimes **none** unless combined with other words!
* How can a computer determine whether $w_1w_2$ contains **one** or **two lexemes**?

$$
\text{PMI}(w_1, w_2) = \log_2\left[ \frac{\Pr(w_1w_2)}{\Pr(w_1)\cdot \Pr(w_2)} \right]
$$

## Computing PMI {.smaller .smaller-math}

$$
\begin{align*}
\text{PMI}(\text{Puerto}, \text{Rico}) = \log_2\left[\frac{f(\text{Puerto Rico})}{f(\text{Puerto})f(\text{Rico})}\right] = \log_2\left[ \frac{6278}{11282 \cdot 8332} \right] &\approx -13.87 \\
\text{PMI}(\text{Hong}, \text{Kong}) = \log_2\left[ \frac{f(\text{Hong Kong})}{f(\text{Hong})f(\text{Kong})} \right] = \log_2\left[ \frac{14141}{15959 \cdot 16446} \right] &\approx -14.18 \\
\text{PMI}(\text{Equatorial}, \text{Guinea}) =  \log_2\left[ \frac{f(\text{Equatorial Guinea})}{f(\text{Equatorial})f(\text{Guinea})} \right] = \log_2\left[ \frac{237}{1505 \cdot 4893} \right] &\approx -14.92 \\
\text{PMI}(\text{New}, \text{York}) = \log_2\left[ \frac{f(\text{New York})}{f(\text{New})f(\text{York})} \right] = \log_2\left[ \frac{264228}{1371071 \cdot 270262} \right] &\approx -20.42 \\
\text{PMI}(\text{and}, \text{the}) = \log_2\left[ \frac{f(\text{and the})}{f(\text{and})f(\text{the})} \right] = \log_2\left[ \frac{1493660}{24814660 \cdot 50067877} \right] &\approx -29.63
\end{align*}
$$

## Thanksgiving Lesson from a DC <span style="text-decoration: line-through;">Native</span> Settler {.smaller .title-11}

::: {layout="[1,1]"}

::: {#anacostia-left}

* Breaking words apart like this can reveal the "sediments of history": consider <a href='https://anacostia.si.edu/' target='_blank'>**Anacostia**</a>
* **Since 1877**: DC neighborhood + river &rarr;
* **1608 - 1877**: A whites-only town, until Frederick Douglass became the first black homeowner
* Until **1608**, denoted "trading" (Anaquash) "area" (eta), before Captain John Smith showed up $\implies$ **[Anacos][tia]**

:::
::: {#anacostia-right}

![](images/dc_income.jpeg)

:::
:::

## Computational Complexity

* $d$ unique items $\implies 2^d$ itemsets
* Number of possible rules $R$:

$$
R = \sum_{k=1}^{d-1}\binom{d}{k} \cdot \sum_{j=1}^{d-k}\binom{d-k}{j} = 3^d - 2^{d + 1} + 1
$$

* Example: $d = 5 \implies 32$ itemsets $\implies 3^5 - 2^6 + 1 = 180$ possible rules
* We need some way to **efficiently** filter all possible rules!

# Training ARM {data-stack-name="Algorithms"}

## ARM in Python {.smaller}

* Using `mlxtend`

```{python}
dataset = [['Milk', 'Onion', 'Nutmeg', 'Kidney Beans', 'Eggs', 'Yogurt'],
           ['Onion', 'Nutmeg', 'Kidney Beans', 'Eggs', 'Yogurt'],
           ['Milk', 'Apple', 'Kidney Beans', 'Eggs'],
           ['Milk', 'Corn', 'Kidney Beans', 'Yogurt'],
           ['Corn', 'Onion', 'Onion', 'Kidney Beans', 'Ice cream', 'Eggs']]
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder

te = TransactionEncoder()
te_ary = te.fit(dataset).transform(dataset)
df = pd.DataFrame(te_ary, columns=te.columns_)
disp(df)
```

## Thresholding: Support $\geq$ 0.6 {.crunch-title .crunch-code .smaller}

::: columns
::: {.column width="35%"}

```{python}
#| label: apriori-support-threshold
#| code-fold: show
from mlxtend.frequent_patterns import apriori
apriori_df = apriori(df, min_support=0.6, use_colnames=True)
apriori_df['length'] = apriori_df['itemsets'].apply(len)
format_dict = {
  'support': lambda x: format(x, '.2f'),
  'itemsets': ', '.join
}
```

:::
::: {.column width="65%"}

```{python}
apriori_df.style.format(format_dict)
```

:::
:::

## Filtering {.crunch-title .crunch-code .smaller}

```{python}
#| label: filter-apriori
#| code-fold: show
rules_df = apriori_df[ (apriori_df['length'] >= 2) & (apriori_df['support'] >= 0.8) ].copy()
rules_df.style.format(format_dict)
```

## ARM in R

```{r}
#| label: arm-in-r
#| code-fold: show
library(arules)
library(arulesViz)
library(plotly)
```

## Generating Transaction Data

```{r}
#| label: r-transaction-data
market_basket <- list(
  c("apple", "beer", "rice", "meat"),
  c("apple", "beer", "rice"),
  c("apple", "beer"),
  c("apple", "pear"),
  c("milk", "beer", "rice", "meat"),
  c("milk", "beer", "rice"),
  c("milk", "beer"),
  c("milk", "pear")
)
names(market_basket) <- paste("T", c(1:8), sep="");
transactions <- as(market_basket, "transactions")
inspect(transactions)
```

## Training the Model

```{r}
#| label: train-arm-r
rules <- apriori(
  transactions,
  parameter = list(
    supp = 0.3,
    conf = 0.5,
    maxlen = 10,
    minlen = 2,
    target = "rules"
  )
)
```

## Results

```{r}
#| label: r-arm-results
inspect(rules)
```
