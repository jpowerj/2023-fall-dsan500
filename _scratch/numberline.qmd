---
title: "Numberline"
format: html
---

```{r}
source("../_globals.r")
```

```{r}
#| label: r-gen-test-scores
#| code-fold: true
library(tidyverse)
num_students <- 30
student_ids <- seq(from = 1, to = num_students)
# Test 1
t1_min_pts <- 0
t1_max_pts <- 268.3
t1_score_vals <- round(runif(num_students, t1_min_pts, t1_max_pts), 2)
t1_mean <- mean(t1_score_vals)
t1_sd <- sd(t1_score_vals)
get_t1_pctile <- function(s) round(100 * ecdf(t1_score_vals)(s), 1)
# Test 2
t2_min_pts <- -1
t2_max_pts <- 1.2
t2_score_vals <- round(runif(num_students, t2_min_pts, t2_max_pts), 2)
t2_mean <- mean(t2_score_vals)
t2_sd <- sd(t2_score_vals)
get_t2_pctile <- function(s) round(100 * ecdf(t2_score_vals)(s), 2)
score_df <- tibble(
  id=student_ids,
  t1_score=t1_score_vals,
  t2_score=t2_score_vals
)
score_df <- score_df |> arrange(desc(t1_score))
score_df
```

```{r}
#| label: r-normalize-test-scores
score_df <- score_df |>
  mutate(
    t1_z_score = round((t1_score - t1_mean) / t1_sd, 2),
    t2_z_score = round((t2_score - t2_mean) / t2_sd, 2),
    t1_pctile = get_t1_pctile(t1_score),
    t2_pctile = get_t2_pctile(t2_score)
  ) |>
  relocate(t1_pctile, .after = t1_score) |>
  relocate(t2_pctile, .after = t2_score)
score_df
```

```{r}
#| label: pctile-numberline
#| fig-height: 3
# https://community.rstudio.com/t/number-line-in-ggplot/162894/4

# https://ggplot2.tidyverse.org/reference/theme.html

# Add a binary indicator to track "me" (student #8)
score_df <- score_df |>
  mutate(is_me = as.numeric(id == 8))
library(ggplot2)
t1_line_data <- tibble(
  x = score_df$t1_pctile,
  y = 0,
  me = score_df$is_me
)
ggplot(t1_line_data, aes(x,y,col=factor(me))) +
  geom_point(aes(size=g_pointsize)) +
  scale_x_continuous(breaks=seq(from=0, to=100, by=10)) +
  dsan_theme("half")
  theme(
    #legend.position="none", 
    #rect = element_blank(),
    #panel.grid = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.line.y = element_blank(),
    axis.ticks.y=element_blank()
  )
```

```{r}
#| label: pctile-numberline
#| fig-height: 2.5
# https://community.rstudio.com/t/number-line-in-ggplot/162894/4
# Add a binary indicator to track "me" (student #8)
score_df <- score_df |>
  mutate(is_me = as.numeric(id == 8))
library(ggplot2)
t1_line_data <- tibble(
  x = score_df$t1_pctile,
  y = 0,
  me = score_df$is_me
)
ggplot(t1_line_data, aes(x,y,col=factor(me))) +
  geom_point(aes(size=g_pointsize)) +
  scale_x_continuous(breaks=seq(from=0, to=100, by=10)) +
  scale_color_discrete(c(0,1)) +
  dsan_theme("half") +
  theme(
    legend.position="none", 
    #rect = element_blank(),
    #panel.grid = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.line.y = element_blank(),
    axis.ticks.y=element_blank(),
    panel.spacing = unit(0, "mm")
  ) +
  labs(
    x = "Test 1 Percentile"
  ) +
  coord_fixed(ratio = 100)
```

```{r}
library(vcd)
library(MASS)
library(tibble)
library(dplyr)
library(ggplot2)
compute_optimal_tr <- function(x) 1/(1 + (1.5)*x)
mean_est <- 0.31
min_est <- 0.127
max_est <- 0.483
tr_data <- tribble(
  ~id, ~ideology, ~elast,
  0, -0.66, min_est,
  1, -0.22, mean_est,
  2, 0.55, max_est
)
tr_data <- tr_data |>
  mutate(
    tr_est = compute_optimal_tr(elast),
    ideology_rescaled = ideology + 1
)
tr_data
ggplot(tr_data, aes(x=ideology_rescaled, y = tr_est)) +
  geom_point()
#fit1 <- fitdistr(data, "exponential") 
mod <- nls(tr_est ~ l * exp(-l * ideology_rescaled), data = tr_data, start = list(l=1))
mod
```

```{r}
my_exp <- function(x) dexp(x, rate = 1.1)
ggplot(tr_data, aes(x=ideology_rescaled, y = tr_est)) +
  geom_point() +
  stat_function(fun = my_exp)
```

Interpolate based on SE

```{r}
library(tidyverse)
compute_optimal_tr <- function(x) 1/(1 + (1.5)*x)
theor_min_est <- 0.028
mean_est <- 0.31
min_est <- 0.127
max_est <- 0.483
theor_max_est <- 0.615
tr_data <- tribble(
  ~id, ~ideology, ~elast,
  0, -1, theor_min_est,
  1, -0.66, min_est,
  2, -0.22, mean_est,
  3, 0.55, max_est,
  4, 1, theor_max_est
)
tr_data <- tr_data |>
  mutate(tr_est = compute_optimal_tr(elast))
my_dexp <- function(x) 0.322 + 0.633 * exp(-0.633 * (x+1))
ggplot(tr_data, aes(x = ideology, y = tr_est)) +
  geom_point() +
  stat_function(fun = my_dexp)
# Interp
interp_ideology <- runif(16, -1, 1)
interp_exp_vals <- my_dexp(interp_ideology)
interp_noise <- rnorm(16, 0, 0.08)
interp_est <- interp_exp_vals + interp_noise
interp_df <- tibble(ideology=interp_ideology, tr_est=interp_est)
ggplot(interp_df, aes(x = ideology, y=tr_est)) +
  geom_point() +
  stat_function(fun = my_dexp)
# And combine
final_df <- bind_rows(tr_data, interp_df)
final_df |> write_csv("political_lang_estimates.csv")
getwd()
```