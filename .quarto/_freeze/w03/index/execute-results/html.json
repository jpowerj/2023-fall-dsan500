{
  "hash": "d4d52f03aff1dc9339de4845f55b115b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 3: Data Science Workflow\"\nsubtitle: \"*DSAN 5100: Data Science and Analytics*<br>Sections 02 and 03\"\ndate: 2023-09-06\ndate-format: full\nauthor: \"Prof. Jeff\"\ninstitute: \"<a href=\\\"mailto:jj1088@georgetown.edu\\\" target=\\\"_blank\\\">jj1088@georgetown.edu</a>\"\n#date: last-modified\n#date-format: \"dddd MMM D, YYYY, HH:mm:ss\"\nlecnum: 3\ncategories:\n  - \"Class Sessions\"\nbibliography: \"../_DSAN5000.bib\"\nformat:\n  revealjs:\n    cache: true\n    html-math-method: mathjax\n    slide-number: true\n    output-file: slides.html\n    section-divs: false\n    simplemenu:\n      flat: true\n      barhtml:\n        header: \"<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>\"\n      scale: 0.5\n    theme: [default, \"../_jjslides.scss\"]\n    revealjs-plugins:\n      - simplemenu\n    include-in-header:\n      text: \"<script src='https://code.jquery.com/jquery-3.7.1.slim.min.js'></script><script src='/jjcustom.js'></script><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css' integrity='sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css'>\"\n  html:\n    output-file: index.html\n    html-math-method: mathjax\n    cache: true\n---\n\n\n\n\n\n\n\n::: {.content-visible unless-format=\"revealjs\"}\n\n<center>\n<a class=\"h2\" href=\"./slides.html\" target=\"_blank\">Open slides in new window &rarr;</a>\n</center>\n\n:::\n\n# Schedule {.smaller .small-title .crunch-title .crunch-callout data-name=\"Schedule\"}\n\n::: {.callout-note icon=\"false\" title=\"<i class=\\\"bi bi-info-circle pe-2\\\"></i>Today's Links\"}\n\n* <a class=\"icon-link\" href=\"https://jfh.georgetown.domains/dsan5000/slides-and-labs/_site/content/slides/computer-networks/notes.html\" target=\"_blank\"><i class=\"bi bi-journals pe-1\"></i>Week 3: Professor Hickman's Lecture Notes</a>\n* <a class=\"icon-link\" href=\"https://jfh.georgetown.domains/dsan5000/slides-and-labs/_site/content/slides/lab-1.2-demo/notes.html\" target=\"_blank\"><i class=\"bi bi-laptop pe-1\"></i>Lab 1.2 Demonstration</a>\n* <a class=\"icon-link\" href=\"https://jfh.georgetown.domains/dsan5000/slides-and-labs/_site/content/labs/assignments/lab-1.2/assignment.html\" target=\"_blank\"><i class=\"bi bi-laptop pe-1\"></i>Lab 1.2 Assignment</a>\n\n:::\n\nToday's Planned Schedule (Section <span class='sec-num'>02</span>):\n\n| | Start | End | Topic | Recording |\n|:- |:- |:- |:- |:-:|\n| **Lecture** | <span class='sec-start'>3:30pm</span> | 4:00pm | <a href=\"#how-the-internet-works\">How the Internet Works &rarr;</a> | <a href=\"../recordings/recording-w03-1.html\" target=\"_blank\"><i class=\"bi bi-film\"></i></a> |\n| | 4:00pm | 4:30pm | <a href=\"#quarto-and-reproducible-research\">Quarto and Reproducible Research &rarr;</a> | <a href=\"../recordings/recording-w03-2.html\" target=\"_blank\"><i class=\"bi bi-film\"></i></a> |\n| | 4:30pm | 5:00pm | <a href=\"#git-and-github\">Git and GitHub &rarr;</a> | <a href=\"../recordings/recording-w03-3.html\" target=\"_blank\"><i class=\"bi bi-film\"></i></a> |\n| **Break!** | 5:00pm | 5:10pm | | | |\n| **Lab** | 5:10pm | 5:50pm | <a href=\"#lab-demonstrations\">Lab Demonstrations &rarr;</a> | <a href=\"../recordings/recording-w03-4.html\" target=\"_blank\"><i class=\"bi bi-film\"></i></a> |\n| | 5:50pm | 6:00pm | <a href=\"#lab-assignment-overview\">Lab Assignment Overview &rarr;</a> | <a href=\"../recordings/recording-w03-5.html\" target=\"_blank\"><i class=\"bi bi-film\"></i></a> |\n\n: {tbl-colwidths=\"[14,12,12,50,12]\"} \n\n# How the Internet Works {.smaller .small-title .not-title-slide data-stack-name=\"The Internet\"}\n\n::: {layout-ncol=2}\n\n::: {#fig-internet-book}\n<img src=\"images/internet_book_cover.jpg\" height=\"525\"></img>\n\nWith great power...<br>(Image via [Amazon.com](https://www.amazon.com/Internet-First-Discovery-Book-Books/dp/0439148243){target=\"_blank\"})\n:::\n\n::: {#fig-timecube}\n\n<img src=\"images/timecube.jpeg\" height=\"525\"></img>\n\n...comes great responsibility.<br>(Image via [Wayback Machine](https://web.archive.org/web/20100701201146/http://www.timecube.com/index.html){target=\"_blank\"}, archived July 1, 2010)\n:::\n\n:::\n\n## Intranet vs. Internet {.smaller}\n\n* Crucial distinction: can set up a \"mini-internet\", an **intranet**, within your own home\n* Organizations (businesses, government agencies) with security needs often do exactly this: link a set of computers and servers together, no outside access\n\n![](images/intranet.png){fig-align=\"center\"}\n\n* In**ter**net = basically a giant in**tra**net, open to the whole world\n\n## Key Building Blocks: Locating Servers {.smaller}\n\n* **IP Addresses** (**I**nternet **P**rotocol addresses): Numeric addresses for uniquely identifying computers on a network\n  * **Georgetown University**, for example, is [allocated IP addresses](https://ipinfo.io/AS11318){target=\"_blank\"} between `141.161.0.0` and `141.161.255.255`\n* **URLs** (**U**niform **R**esource **L**ocators): The more human-readable website addresses you're used to: `google.com`, `georgetown.edu`, etc.\n  * **Built on top of** IP addresses, via a directory which maps URLs &rarr; IP addresses\n  * `georgetown.edu`, for example, is really `23.185.0.2`[^ping]\n\n[^ping]: To see this, you can open your Terminal and run the `ping` command: `ping georgetown.edu`.\n\n## What Happens When I Visit a URL/IP? {.smaller}\n\n* **HTTP(S)** (**H**yper**T**ext **T**ransfer **P**rotocol (**S**ecure)): common syntax for web clients to make **requests** and servers to **respond**\n  * Several types of requests can be made: `GET`, `POST`, `HEAD`; for now, we focus on the `GET` request, the request your **browser** makes by default\n* **HTML** (**H**yper**T**ext **M**arkup **L**anguage): For specifying **layout and content** of page\n  * Structure is analogous to **boxes** of content: `<html>` box contains `<head>` (metadata, e.g., page title) and `<body>` (page content) boxes, `<body>` box contains e.g. header, footer, navigation bar, and main content of page.\n  * Modern webpages also include **CSS** (**C**ascading **S**tyle **S**heets) for **styling** this content, and **Javascript**[^js] for **interactivity** (changing/updating content)\n  * HTML allows **linking** to another page with a special anchor tag (`<a>`): `<a href=\"https://npr.org/\">news</a>` creates a link, so when you click \"news\", browser will request (fetch the HTML for) the **URL** `https://npr.org`\n\n[^js]: Incredibly, despite the name, Javascript has absolutely nothing to do with the Java programming language...\n\n## HTTP(S) Requests in Action\n\n![Image from @menczer_first_2020 [p. 90]](images/client_server.jpeg){fig-align=\"center\"}\n\n## How Does a Web Server Work? {.smaller .shift-footnotes .crunch-title .crunch-images .crunch-lists}\n\n* We use the term \"server\" **metonymously**[^metonym]\n  * Sometimes we mean the **hardware**, the box of processors and hard drives\n  * But, sometimes we mean the **software** that **runs on** the hardware\n* A web server, in the **software** sense, is a program that is **always running**, 24/7\n* Waits for **requests** (via HTTPS), then **serves** HTML code in response (also via HTTPS)\n\n::: columns\n::: {.column width=\"55%\"}\n\n::: {#fig-server-code}\n\n```python {filename=\"hello_server.py\"}\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello_world():\n    return \"<p>Hello, World!</p>\"\n@app.route(\"/hack\")\ndef hacker_detected():\n    return \"<p>Hacker detected, pls stop</p>\"\n```\n```bash\n$ flask --app hello_server run\n * Serving Flask app 'hello_server'\n * Running on http://127.0.0.1:5000 (CTRL+C to quit)\n127.0.0.1 [06/Sep/2023 00:11:05] \"GET / HTTP\" 200\n127.0.0.1 [06/Sep/2023 00:11:06] \"GET /hack HTTP\" 200\n```\n\nBasic web server (written in [Flask](https://flask.palletsprojects.com/en/2.3.x/quickstart/#a-minimal-application){target=\"_blank\"})\n:::\n\n:::\n::: {.column width=\"45%\"}\n\n\n\n::: {#fig-localhost .crunch-figcaption layout-nrow=2}\n\n<img src=\"images/flask_server.jpeg\"></img>\n\n<img src=\"images/flask_server_hacker.jpeg\"></img>\n\n[Browser-parsed] responses to `GET` requests\n:::\n\n:::\n:::\n\n[^metonym]: Sorry for jargon: it just means using the **same word** for **different levels** of a system (dangerous when talking computers!)\n\n## How Does a Web Client Work? {.smaller .crunch-title .crunch-figures-left}\n\n<!-- * The figures on the previous slide \"hid\" one of the important steps! -->\n* Once the server has responded to your **request**, you still only have **raw HTML code**\n* So, the **browser** is the program that **renders** this raw HTML code as a visual, (possibly) interactive webpage\n* As a data scientist, the most important thing to know is that **different browsers can render the same HTML differently!**\n\n::: columns\n::: {.column width=\"50%\"}\n\n* A headache when pages are accessed through laptops\n* A **nightmare** when pages are accessed through laptops **and mobile**\n\n:::\n::: {.column width=\"50%\"}\n\n![](images/qualtrics_preview.jpeg){fig-align=\"center\"}\n\n:::\n:::\n\n## Connecting to Servers\n\n* We've talked about the shell on your **local computer**, as well as the Georgetown Domains shell\n* We used Georgetown Domains' web interface to access that shell, but you can **remotely connect** to any other shell from your local computer using the `ssh` command!\n\n![](images/ssh){fig-align=\"center\"}\n\n## Transferring Files to/from Servers\n\n* Recall the **copy** command, `cp`, for files on your local computer\n* There is a remote equivalent, `scp` (**S**ecure **C**opy **P**rotocol), which you can use to copy files to/from remote servers to your local computer\n\n![](images/scp.png){fig-align=\"center\"}\n\n## Important Alternative: `rsync` {.crunch-title}\n\n* Similar to `scp`, with same syntax, except it **synchronizes** (only copies files which are different or missing)\n\n```bash {filename=\"sync_files.sh\"}\nrsync -avz source_directory/ user@remote_server:/path/to/destination/\n```\n\n* `-a` (\"archive\") tells rsync you want it to copy *recursively*\n* `-v` (\"verbose\") tells rsync to print information as it copies\n* `-z` (\"zip/compress\") tells rsync to compress files before copying and then decompress them on the server (thus massively speeding up the transfer)\n* [https://explainshell.com/explain?cmd=rsync+-avz](https://explainshell.com/explain?cmd=rsync+-avz){target=\"_blank\"}\n\n# Quarto and Reproducible Research {data-stack-name=\"Quarto\"}\n\n![](images/quarto_logo.svg){fig-align=\"center\"}\n\n## Why Do We Need Reproducible Research? {.smaller .small-title}\n\n* Main human motivations (Max Weber): Wealth, Prestige, Power &rarr; \"TED talk circuit\"\n\n![<a href=\"https://www.nytimes.com/2017/10/18/magazine/when-the-revolution-came-for-amy-cuddy.html\" target=\"_blank\">*New York Times Magazine*, October 18, 2017.</a>](images/cuddy.jpeg){fig-align=\"center\"}\n\n## Science vs. Human Fallibility {.smaller}\n\n* Scientific method + replicability/pre-registration = \"Tying ourselves to the mast\"\n\n![John William Waterhouse, <a href=\"https://commons.wikimedia.org/wiki/File:WATERHOUSE_-_Ulises_y_las_Sirenas_(National_Gallery_of_Victoria,_Melbourne,_1891._%C3%93leo_sobre_lienzo,_100.6_x_202_cm).jpg\">*Ulysses and the Sirens*</a>, Public domain, via Wikimedia Commons](images/ulysses.jpg){fig-align=\"center\"}\n\n* If we aim to **disprove (!)** our hypotheses, and we **pre-register** our methodology, we are **bound** to discovering truth, even when it is disadvantageous to our lives...\n\n## Human Fallibility is Winning... {.smaller}\n\n> More than 70% of researchers have tried and failed to reproduce another scientist's experiments, and more than half have failed to reproduce their own experiments. Those are some of the telling figures that emerged from Nature's survey of 1,576 researchers [@baker_500_2016]\n\n::: columns\n::: {.column width=\"65%\"}\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsource(\"../_globals.r\")\nlibrary(dplyr)\nlibrary(ggplot2)\nga_lawyers <- c(21362, 22254, 23134, 23698, 24367, 24930, 25632, 26459, 27227, 27457)\nski_df <- tibble::tribble(\n  ~year, ~varname, ~value,\n  2000, \"ski_revenue\", 1551,\n  2001, \"ski_revenue\", 1635,\n  2002, \"ski_revenue\", 1801,\n  2003, \"ski_revenue\", 1827,\n  2004, \"ski_revenue\", 1956,\n  2005, \"ski_revenue\", 1989,\n  2006, \"ski_revenue\", 2178,\n  2007, \"ski_revenue\", 2257,\n  2008, \"ski_revenue\", 2476,\n  2009, \"ski_revenue\", 2438,\n)\nski_mean <- mean(ski_df$value)\nski_sd <- sd(ski_df$value)\nski_df <- ski_df %>% mutate(val_scaled = 12*value, val_norm = (value - ski_mean)/ski_sd)\nlaw_df <- tibble::tibble(year=2000:2009, varname=\"ga_lawyers\", value=ga_lawyers)\nlaw_mean <- mean(law_df$value)\nlaw_sd <- sd(law_df$value)\nlaw_df <- law_df %>% mutate(val_norm = (value - law_mean)/law_sd)\nspur_df <- dplyr::bind_rows(ski_df, law_df)\nggplot(spur_df, aes(x=year, y=val_norm, color=factor(varname, labels = c(\"Ski Revenue\",\"Lawyers in Georgia\")))) +\n  stat_smooth(method=\"loess\", se=FALSE) +\n  geom_point(size=g_pointsize/4) +\n  labs(\n    fill=\"\",\n    title=\"Ski Revenue vs. Georgia Lawyers\",\n    x=\"Year\",\n    color=\"Correlation: 99.2%\",\n    linetype=NULL\n  ) +\n  dsan_theme(\"custom\", 18) +\n  scale_x_continuous(\n    breaks=seq(from=2000, to=2014, by=2)\n  ) +\n  #scale_y_continuous(\n  #  name=\"Total Revenue, Ski Facilities (Million USD)\",\n  #  sec.axis = sec_axis(~ . * law_sd + law_mean, name = \"Number of Lawyers in Georgia\")\n  #) +\n  scale_y_continuous(breaks = -1:1,\n    labels = ~ . * round(ski_sd,1) + round(ski_mean,1),\n    name=\"Total Revenue, Ski Facilities (Million USD)\",\n    sec.axis = sec_axis(~ . * law_sd + law_mean, name = \"Number of Lawyers in Georgia\")) +\n  expand_limits(x=2010) +\n  #geom_hline(aes(yintercept=x, color=\"Mean Values\"), as.data.frame(list(x=0)), linewidth=0.75, alpha=1.0, show.legend = TRUE) +\n  scale_color_manual(\n    breaks=c('Ski Revenue', 'Lawyers in Georgia'),\n    values=c('Ski Revenue'=cbPalette[1], 'Lawyers in Georgia'=cbPalette[2]))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/ski-revenue-lawyers-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n\n\n\n:::\n::: {.column width=\"35%\"}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(ski_df$value, law_df$value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9921178\n```\n\n\n:::\n:::\n\n\n\n\n\n\n:::\n:::\n\n## R vs. RStudio vs. Quarto {.smaller data-name=\"R\"}\n\n<!-- (Another important distinction!) -->\n\n<!-- start Quarto box -->\n\n:::::: {style=\"border: 2px solid black; padding: 10px;\"}\n\n<center>\n<img src=\"images/quarto_logo.svg\" width=\"20%\"></img>\n</center>\n\n<!-- start columns -->\n::::: columns\n\n<!-- start RStudio column -->\n<div class=\"column\" style=\"width: 45%; border: 2px solid black; padding: 8px;\">\n\n<center style=\"margin: 0px !important;\">\n<img src=\"images/RStudio_logo.svg\" width=\"25%\"></img>\n</center>\n\n* GUI wrapper around R (Integrated Development Environment = IDE)\n* Run **blocks** of R code (`.qmd` **chunks**)\n\n<!-- start R box inside RStudio box -->\n\n::: {style=\"border: 2px solid black; width: 98%; margin: auto; padding: 2px;\"}\n\n**<a href=\"https://www.r-project.org/\" target=\"_blank\">The R Language <i class=\"fa-brands fa-r-project\"></i></a>**\n\n* Programming language\n* Runs scripts via `Rscript <script>.r`\n<!-- * Comes with a basic GUI (R-GUI) -->\n\n:::\n<!-- end R box -->\n\n</div>\n<!-- end RStudio column -->\n\n<!-- start + column -->\n<div class=\"column\" style=\"width: 5%; padding: 5px;\">\n\n<div class=\"center r-stretch\" style=\"margin-top: auto;\">\n<h3 style=\"text-align: center;\">\\+</h3>\n</div>\n\n</div>\n<!-- end + column -->\n\n<!-- start Jupyter column -->\n<div class=\"column\" style=\"width: 45%; border: 2px solid black; padding: 8px;\">\n\n<center style=\"margin: 0px !important;\">\n<img src=\"images/jupyter_logo.svg\" width=\"50%\" style=\"margin: 0px;\"></img></span>\n</center>\n\n* GUI wrapper around Python (IDE)\n* Run **blocks** of Python code (`.ipynb` **cells**)\n\n<!-- start python box inside Jupyter column -->\n::: {.column style=\"width: 98%; border: 2px solid black; margin: auto; padding: 2px;\"}\n\n<!-- <img src=\"/assets/img/python_logo.svg\" width=\"50%\" style=\"margin: 0px !important;\"></img> -->\n<a href=\"https://www.python.org/\" target=\"_blank\">The Python Language <i class=\"fa-brands fa-python\"></i></a>\n\n* Scripting language\n* On its own, just runs scripts via `python <script>.py`\n\n:::\n<!-- end Python column -->\n\n</div>\n<!-- end Jupyter column -->\n\n:::::\n<!-- end columns -->\n\n::::::\n<!-- end quarto box -->\n\n## Reproducibility and Literate Programming {.smaller .small-title}\n\n* **Reproducible document**: includes both the **content** (text, tables, figures) and the **code** or instructions required to **generate** that content.\n  * Designed to ensure that others can reproduce the same document, including its data analysis, results, and visualizations, consistently and accurately.\n  * tldr: If you're copying-and-pasting results from your **code output** to your **results document**, a red flag should go off in your head!\n* **Literate programming** is a coding and documentation approach where **code** and **explanations of the code** are combined in a single document.\n  * Emphasizes clear and understandable code by interleaving **human-readable text** (explanations, comments, and documentation) with **executable code**.\n\n## Single Source, Many Outputs {.smaller}\n\n* We can create content (text, code, results, graphics) within a **source document**, and then use different **weaving engines** to create different **document types**:\n\n::: columns\n::: {.column width=\"50%\"}\n\n* Documents\n  * Web pages (HTML)\n  * Word documents\n  * PDF files\n* Presentations\n  * HTML\n  * PowerPoint\n:::\n::: {.column width=\"50%\"}\n\n* Websites/blogs\n* Books\n* Dashboards\n* Interactive documents\n* Formatted journal articles\n\n:::\n:::\n\n\n## Interactivity! {.smaller}\n\n* Are we \"hiding something\" by choosing a specific bin width? **Make it transparent!**\n\n\n\n\n\n\n```{=html}\n<iframe src=\"https://jjallaire.shinyapps.io/shiny-old-faithful/\" height=\"70%\" width=\"100%\"></iframe>\n```\n\n\n\n\n\n\n<!-- https://observablehq.com/@slopp/observable-for-r-users -->\n\n# Git and GitHub {data-stack-name=\"Git and GitHub\"}\n\n\n## Git vs. GitHub {data-name=\"Git\"}\n\n(Important distinction!)\n\n::: columns\n::: {.column width=\"50%\"}\n\n**<a href=\"https://git-scm.com/\" target=\"_blank\">Git <i class=\"bi bi-git\" style=\"margin-left: 5px !important;\"></i></a>**\n\n* Command-line program\n* `git init` in shell to create\n* `git add` to track files\n* `git commit` to commit changes to tracked files\n\n:::\n::: {.column width=\"50%\"}\n\n**<a href=\"https://github.com/\" target=\"_blank\">GitHub <i class=\"bi bi-github\"style=\"margin-left: 5px !important;\"></i></a>**\n\n* Code hosting website\n* Create a **repository** (repo) for each project\n* Can **clone** repos onto your local machine\n\n:::\n:::\n\n<center style=\"border: 2px solid black !important; padding: 5px !important;\">\n**`git push`/`git pull`**: The link between the two!\n</center>\n\n## Git Diagram\n\n<img src=\"https://mermaid.ink/svg/pako:eNp9j70KAjEQhF8lbH1PkFqwsrJNsyZ7STB_rBtBjnt34x0IitgNM9_AzAK2OgINPsqRsQVTlFK25hzlW14Yiw3K0Z1SbXsayF5rl0_zZ_uNZoxlczKxp_9NmGBQo-HGxOUVGJBAmQzoIR3N2JMYMGUdKHap50exoIU7TdCbQ6FDRM-YQc-YbsMlF6Xyab-9vV-fAwFZpw\" class=\"quarto-figure quarto-figure-center\"></img>\n\n## Initializing a Repo\n\n* Let's make a directory for our project called `cool-project`, and initialize a Git repo for it\n\n<!-- ```{.bash code-line-numbers=\"|3|4|\"} -->\n```bash\nuser@hostname:~$ mkdir cool-project\nuser@hostname:~$ cd cool-project\nuser@hostname:~/cool-project$ git init\nInitialized empty Git repository in /home/user/cool-project/.git/\n```\n\n* This creates a hidden folder, `.git`, in the directory:\n\n<!-- ```bash{.bash code-line-numbers=\"|3-5\"} -->\n```bash\nuser@hostname:~/cool-project$ ls -lah\ntotal 12K\ndrwxr-xr-x  3 user user 4.0K May 28 00:53 .\ndrwxr-xr-x 12 user user 4.0K May 28 00:53 ..\ndrwxr-xr-x  7 user user 4.0K May 28 00:53 .git\n```\n\n::: {.footer .footersmall}\nThe Git Side: Local I\n:::\n\n## Adding and Committing a File\n\nWe're writing Python code, so let's create and track `cool_code.py`:\n\n```bash\nuser@hostname:~/cool-project$ touch cool_code.py\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n        new file:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Initial version of cool_code.py\"\n[main (root-commit) b40dc25] Initial version of cool_code.py\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 cool_code.py\n```\n\n## The Commit Log\n\n* View the commit log using `git log`:\n\n```bash\nuser@hostname:~/cool-project$ git log\ncommit b40dc252a3b7355cc4c28397fefe7911ff3c94b9 (HEAD -> main)\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:57:16 2023 +0000\n\n    Initial version of cool_code.py\n```\n\n::: {.hidden}\n\n\n\n\n\n```{mermaid}\ngitGraph\n   commit id: \"b40dc25\"\n```\n\n\n\n\n\n:::\n\n<div class=\"quarto-figure quarto-figure-center\">\n<img class=\"r-stretch center\" src=\"https://mermaid.ink/svg/pako:eNpdjjELwjAUhP9KOOjWQYoumQUnJzfJ8sx7bQNNUuLLIKX_3VZxcb37vuMW-MwCiyHopdA8umSM8TnGoCawNQ6P44F9d3JwqWn-y84BLaKUSIG3mWX3HXSUKA47wdJTnXTX1w2lqvn2Sh5WS5UWdWZSOQcaCkXYnqbnlgoHzeX6vfZ52GKmdM_5x6xvd4Y8pg\"></img>\n</div>\n\n## Making Changes\n\n```bash\nuser@hostname:~/cool-project$ git status\nOn branch main\nnothing to commit, working tree clean\nuser@hostname:~/cool-project$ echo \"1 + 1\" >> cool_code.py\nuser@hostname:~/cool-project$ more cool_code.py\n1 + 1\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Added code to cool_code.py\"\n[main e3bc497] Added code to cool_code.py\n 1 file changed, 1 insertion(+)\n```\n\n##\n\nThe `git log` will show the new version:\n\n```bash\nuser@hostname:~/cool-project$ git log\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224 (HEAD -> main)\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial version of cool_code.py\n\n\n```\n\n<img class=\"quarto-figure quarto-figure-center\" src=\"https://mermaid.ink/svg/pako:eNpljrEKwjAURX8l3LmDaEXMLDg5uUmW17zXNtA0Jb4MUvrvtoqT672Hw5nhEwssuqDXTFPvRmOMTzEGNYGtcWjqHfv90eH_kkPj6_PJARWi5EiBV9W8gQ7aSxSHjWNpqQy6KZYVpaLp_ho9rOYiFcrEpHIJ1GWKsC0Nz3UVDpry7Zv3qaww0fhI6ccsb4kvPis\"></img>\n\n## More Changes\n\n```bash\nuser@hostname:~/cool-project$ echo \"2 + 2\" >> cool_code.py\nuser@hostname:~/cool-project$ more cool_code.py\n1 + 1\n2 + 2\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Second version of cool_code.py\"\n[main 4007db9] Second version of cool_code.py\n 1 file changed, 1 insertion(+)\n```\n\n## And the `git log`\n\n```bash\nuser@hostname:~/cool-project$ git log\ncommit 4007db9a031ca134fe09eab840b2bc845366a9c1 (HEAD -> main)\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:39:28 2023 +0000\n\n    Second version of cool_code.py\n\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py\n```\n\n## Undoing a Commit I\n\nFirst check the `git log` to find the **hash** for the commit you want to revert back to:\n\n```{.bash}\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n```\n\n<img class=\"quarto-figure quarto-figure-center\" src=\"https://mermaid.ink/svg/pako:eNptjz8PgjAQxb9KczNDoxhCZxMnJzfT5do7oAmlpF4HQ_jugsZJ1_d-eX8W8IkYDPRBLhnnwU5KKZ9iDKICGWXB1Zr84WTh1-Kj83Xb_LNqrRtyrQWoIHKOGGhrWXbQggwc2cLOEXdYRtkj1g3FIun2nDwYyYUrKDOh8DlgnzGC6XB8bCpTkJSvn-XvAxXMON1T-jLrC-H5Res\"></img>\n\n## Undoing a Commit II\n\n* <i class=\"bi bi-exclamation-triangle\"></i> **This is irreversable!** <i class=\"bi bi-exclamation-triangle\"></i>\n\n```bash\nuser@hostname:~/cool-project$ git reset --hard e3bc497ac\nHEAD is now at e3bc497 Added code to cool_code.py\nuser@hostname:~/cool-project$ git log\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224 (HEAD -> main)\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py\n```\n\n## Onwards and Upwards\n\n```bash\nuser@hostname:~/cool-project$ echo \"3 + 3\" >> cool_code.py\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Added different code to cool_code.py\"\n[main 700d955] Added different code to cool_code.py\n 1 file changed, 1 insertion(+)\n```\n\n<img src=\"https://mermaid.ink/svg/pako:eNptz7EOgkAMBuBXuXRmuCiGcLPEyQUSB3NLuVa4xOPIWQZDeHdB46Rr_y9t_xlcJAYDnZdTwrG3g1LKxRC8KE9GWWhzTW53sPAb8b51eVn8i3KtC2pLC0qeIxtVV5eqbqpfWGhN5WFdDxkETgE9re_MG7QgPQe2sDniG0532W4tK8VJYvMcHBhJE2cwjYTCR49dwgDmhvfHOmXyEtP5U_HdNIMRh2uMX7O8ADEKUdc\"></img>\n\n##\n\nThe final `git log`:\n\n```bash\nuser@hostname:~/cool-project$ git log\ncommit 700d955faacb27d7b8bc464b9451851b5e319f20 (HEAD -> main)\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:44:49 2023 +0000\n\n    Added different code to cool_code.py\n\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs <jjacobs3@cs.stanford.edu>\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py\n\n```\n\n## But Why These Diagrams?\n\nEven the simplest projects can start to look like:\n\n::: {.hidden}\n\n\n\n\n\n```{mermaid}\ngitGraph\n       commit id: \"537dd67\"\n       commit id: \"6639143\"\n       branch nice_feature\n       checkout nice_feature\n       commit id: \"937ded8\"\n       checkout main\n       commit id: \"9e6679c\"\n       checkout nice_feature\n       branch very_nice_feature\n       checkout very_nice_feature\n       commit id: \"7f4de03\"\n       checkout main\n       commit id: \"6df80c1\"\n       checkout nice_feature\n       commit id: \"bd0ebb8\"\n       checkout main\n       merge nice_feature id: \"9ff61cc\" tag: \"V 1.0.0\" type: HIGHLIGHT\n       checkout very_nice_feature\n       commit id: \"370613b\"\n       checkout main\n       commit id: \"9a07a97\"\n```\n\n\n\n\n\n:::\n\n<img src=\"https://mermaid.ink/svg/pako:eNqdU8FqwzAM_RWjcykO6Zwm50E72E4bO4xAUWw5MWvi4DmDUPrvc9aFpdB27Qy-SO9JjydpB9IqggxK41cO2ypv2OFJW9fGM6MylsNdnCglkhxOp4WI02gRT9KFw0ZWrDGSNprQd45-qRXJd9v5M9lp4TT0JbWc9h3JNZrmDImESFJ5inSy44_WT3L95rLgC5CpgEQvFPH4NtVC6SWX0dWqj8iF4lQUf_tUkyvpqN7omdYiksEz5rEcAq8smvM5HwJ9SxlbP6zWj-G__NuVOOEiiosbZ4k8wTQsHswgiA9AFZZ1N4Bz8BXVlMOAU6Sx2_qh-D5AsfP2uW8kZN51NIOuVejp3mDpsIZM4_YjREkZb93T4QC-72AGLTZv1o6Y_RdGMfVs\"></img>\n\n## The GitHub Side: Remote\n\n![](images/github_repo.png)\n\n## An Empty Repo\n\n![](images/github_empty_repo.png)\n\n## Refresh after `git push`\n\n![](images/github_push.png)\n\n## Commit History\n\n![](images/gh_history.png)\n\n## Checking the `diff`\n\n![](images/gh_diff.png)\n\n## Web Development {data-name=\"Web Dev\"}\n\n| | Frontend<br><i class=\"bi bi-layout-text-window-reverse\"></i> <i class=\"bi bi-display\"></i> <i class=\"bi bi-graph-up\"></i> <i class=\"bi bi-ui-checks\"></i> | Backend<br><i class=\"bi bi-database\"></i> <i class=\"bi bi-terminal\"></i> <i class=\"bi bi-table\"></i> <i class=\"bi bi-key\"></i> |\n| - | - | - |\n| **Low Level** | HTML/CSS/JavaScript | GitHub Pages\n| **Middle Level** | JS Libraries | PHP, SQL |\n| **High Level** | React, Next.js | Node.js, Vercel |\n\n::: {.notes}\nFrontend icons: UI+UI elements, what the user sees (on the screen), user experience (UX), data visualization\nBackend icons: Databases, Security\n:::\n\n## Getting Content onto the Internet {.nostretch}\n\n::: columns\n::: {.column width=\"50%\"}\n\n<ul>\n<li>Step 1: `index.html`</li>\n<li>Step 2: Create GitHub repository</li>\n<li>Step 3: `git init`, `git add -A .`, `git push`</li>\n<li style=\"border: 2px solid black !important; padding: 4px !important;\"><span>Step 4: Enable GitHub Pages in repo settings</span></li>\n<li>Step 5: `<username>.github.io`!</li>\n</ul>\n\n:::\n::: {.column width=\"50%\"}\n\n![](images/gh_pages.png){fig-align=\"center\" width=70%}\n\n:::\n:::\n\n## Deploying from a Branch/Folder\n\n![](images/gh_pages_2.png)\n\n# Lab Demonstrations {data-stack-name=\"Lab Demos\"}\n\n## Lab Demonstration 1: Transferring Files\n\n## Lab Demonstration 2: Quarto\n\n## Lab Demonstration 3: Git and GitHub\n\n# Lab Assignment Overview {data-stack-name=\"Lab Assignment\"}\n\n## Assignment Overview {.smaller}\n\n1. **Create a repo** on your private GitHub account called `5000-lab-1.2`\n2. **Clone** the repo to your local machine with `git clone`\n3. Create a blank **Quarto website** project, then use a `.bib` file to add citations\n4. Add content to `index.qmd`\n5. Add content to `about.ipynb`\n6. Build a simple presentation in `slides/slides.ipynb` using the `revealjs` format\n7. Render the website using `quarto render`\n8. Sync your changes to GitHub\n9. Use `rsync` or `scp` to copy the `_site` directory to your **GU domains** server (within `~/public_html`)\n10. Create a **Zotero** (or **Mendeley**) account, download the software, and add at least one reference to your site by syncing the `.bib` file\n\n## References {data-sm=\"false\"}\n\n::: {#refs}\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}